package EX2;

import java.util.Arrays;
import java.util.Scanner;

public class Ex2_1 {
public static void main(String[] args) {
	Scanner s = new Scanner(System.in);

	System.out.println( "enter a number:");
	int n = s.nextInt();


	int [] intArray=primeDividers(n);
	System.out.println(Arrays.toString(intArray));
	s.close();
}
	
 public static int []  primeDividers(int n)
 {
	
	int[] res = new int[primeDividersCount(n)];
	
	int count=0,c=n;
	for (int i = 2; i <= n; i++) 
	{
		if(isPrime(i))
		{
			while(n%i==0) 
			{
				res[count]=i;
				count++;
				n/=i;
			}		
		}
	}
		
	   
    
  	
	return res;
 }
 
public static int primeDividersCount(int n) {

	int count=0,c=n;
	for (int i = 2; i <= n; i++) 
	{
		if(isPrime(i))
		{
			while(n%i==0) 
			{
				count++;
				n/=i;
			}		
		}
	}
	return count;
   }

public static  boolean isPrime(int n) {
	int count2=0;
	for(int i=2; i<n; i++) {
		if(n%i==0){
			count2++;
		}
	}
	if(count2!=0) 
	{
		return false;
	}
	else 
	{
		return true;
	}
}
}

//////////

package EX2;

public class Ex2_2_1 {

public static boolean isPerfect (int n) {
int sum=0;
for (int i = 1; i < n; i++) {
	if(n%i==0) {
		sum+=i;
	}
}
	if(sum==n) {
		return true;
	
}
return false;
}


public static void main(String[] args) {
	int n;
	n=500;
		
	System.out.println(isPerfect(n));
    }
}

///////

package EX2;

public class Ex2_2_2 {
	public static boolean isPerfect (int n) {
		int sum=0;
		for (int i = 1; i < n; i++) {
			if(n%i==0) {
				sum+=i;
			}
		}
			if(sum==n) {
				return true;
			
		}
		return false;
		}
		public static int CountisPerfect(int p) {
			int count=0;
			
			for(int j=2; j<p; j++) {
			if(isPerfect(j)) {
				count++;
			  }
		  }
			return count;
		}

		public static int[] PerfectNumbers(int n) {
			int t=0;
			int [] array = new int [CountisPerfect( n)];
			for (int k = 2; k < n; k++) {
				if(isPerfect(k)) {
					array [t]=k;
					t++;
				}
			}
			return array;
		}
		public static void printArray(int [] array) {
			for(int i=0;i<array.length;i++) {
				System.out.println(array[i]);
			}
		}

		public static void main(String[] args) {
			int n;
			n=500;
				
			printArray(PerfectNumbers(n));
		    }
		}

///////

package EX2;

import java.util.Arrays;

public class Ex2_3_1 {

	public static boolean[][] nextGeneration(boolean[][] cells) {
		boolean[][] nextGeneration = new boolean[cells.length][cells[0].length];
		for (int i = 0; i < cells.length; i++) {
			for (int j = 0; j < cells[0].length; j++) {
				if (!checkCell(cells, i, j)) {
					if (numberOfNeighbors(cells, i, j) == 3) {
						nextGeneration[i][j] = true;
					}
				} else if (checkCell(cells, i, j)) {
					if (numberOfNeighbors(cells, i, j) == 2 || numberOfNeighbors(cells, i, j) == 3) {
						nextGeneration[i][j] = true;

					} else {
						nextGeneration[i][j] = false;

					}
				}
			}
		}
return nextGeneration;
	}
		
	public static boolean isInside(boolean[][] cells, int x, int y) {
    if((0<=x)&&(x<cells.length-1)&&(0<=y)&&(y<cells[0].length-1)) {
    	return true;
    }
    return false;
  }
	
public static boolean checkCell(boolean[][] cells, int x, int y) {
//	if(isInside(cells, x, y)) {
	return cells[x][y];  
	
	//}
	
	//else return checkCell(cells,x,y);
}

public static int numberOfNeighbors(boolean[][] cells,int x,int y) {
	int counter = 0;
	for (int i = x-1; i <= x+1; i++) {
	if(i>=0 && i<cells.length) {
	for (int j = y-1; j <cells[i].length-1; j++) {
		if(j>=0 && j<=y+1 ) {
			if(i!=x || j!=y) {
				if(checkCell(cells, i, j)) //if the value in the cells is,
	    	//true it will get in and add counter +1 (with help function) if false step out,
	    	//and not add counter +1
        {
        	counter++;
		
                  }
                 }
	          }
            }
	     }
	}	

return counter;
}

	
public static void main(String[] args) {
		
boolean c[][]= {{true,true,false,true,false,false,false,true,true,false},
               {true,true,false,true,false,false,false,true,true,false},
               {false,true,false,true,false,false,false,true,true,false},
               {true,true,false,true,false,false,false,true,true,false}};


System.out.println(numberOfNeighbors(c, 0,0));	
	
    }
}

////////

package EX2;

import java.awt.Color;
import java.time.Clock;
import java.time.ZoneId;
import java.util.Date;
import java.util.Random;
import java.util.Scanner;

public class Ex2_3_2 {

	public static void main(String[] args) {
		boolean c[][] = { { true, true, false, true },
			        	{ true, false, false, true }, 
				        { false, true, false, true },
				        { true, true, false, true } };

		gameoflife(24, 10);
	}

	public static void gameoflife(int n, int cellsize)  {
		 setboard(n, cellsize);
			boolean[][] cells = randomboolarray(n);
			drawcells(cells, cellsize, StdDraw.GREEN);
			while(deadOralive(cells)) {  
				cells = Ex2_3_1.nextGeneration(cells);
				drawcells(cells, cellsize, StdDraw.GREEN);

		}

	}

	
	   public static boolean deadOralive(boolean[][] cells) {
			boolean isAlive = false;
			for (int k3 = 0; k3 < cells.length; k3++) {
				for (int k4 = 0; k4 < cells.length; k4++) {
					if (Ex2_3_1.checkCell(cells, k3, k4)){
						isAlive = true;

					}
				}
			}
			return isAlive;
		}
	
	
	
	

	/**
	 * fill the boolean array(n*n) randomalit
	 * 
	 * @param n
	 * @return
	 */
	public static boolean[][] randomboolarray(int n) {
		Random rand = new Random();
		boolean[][] arr = new boolean[n][n];
		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < arr[i].length; j++) {
				arr[i][j] = rand.nextBoolean();
			}
		}
		return arr;
	}

	/**
	 * accept n to represent the length of cells array (n*n) accept cellsize to
	 * represent cell size prepare board to the accepted array accept color set pen
	 * color to the accepted color
	 * 
	 * @param n
	 * @param cellsize
	 */
	public static void setboard(int n, int cellsize) {
		StdDraw.setCanvasSize(cellsize * (2 * n), cellsize * (2 * n));
		StdDraw.setScale(0-5, n*cellsize-5);
		for (int i = 0; i <= n; i++) {
			StdDraw.line((i * cellsize) - 5, -5, (i * cellsize) - 5, (n * cellsize) - 5);// axis x
			StdDraw.line(-5, (i * cellsize) - 5, (n * cellsize) - 5, (i * cellsize) - 5);// axis y
		}
	}

	public static void drawcells(boolean[][] cells, int cellsize, Color color) {

		int n = cells.length;
		for (int k = 0; k < n; k++) {
			for (int k2 = 0; k2 < n; k2++) {
				if (Ex2_3_1.checkCell(cells, k, k2)) {
					StdDraw.setPenColor(color);
					StdDraw.filledSquare(k * cellsize, k2 * cellsize, cellsize / 2.15);

				} else {
					StdDraw.setPenColor(StdDraw.WHITE);
					StdDraw.filledSquare(k * cellsize, k2 * cellsize, cellsize / 2.15);

				}
			}
		}
		// StdDraw.clear();
	}
}


////////

package EX2;

public class Ex2_4_1 {
	public static int hex2Dec(String hex) {
	int sum=0 ;
	int j=0;
		for (int i = hex.length()-1; i >=0; i--) {
		sum +=charToInt(hex.charAt(i))*Math.pow(16, j++) ;
				
		}
		return sum;
	}

	private static double charToInt(char c) {
		if(c=='A') 
		{
			return 10;
		}else if(c=='B') 
		{
			return 11;
		}
		else if(c=='C') 
		{
			return 12;
		}
		else if(c=='D') 
		{
			return 13;
		}else if(c=='E') 
		{
			return 14;
		}else if(c=='F')
		{
			return 15;	
		}
		else {
			return c-'0';
		}
		
	}
	public static void main(String[] args) {
		System.out.println(hex2Dec("42F1B8"));
	}

}


////////

package EX2;

public class Ex2_4_2 {
	public static String dec2Hex(int num) 
	{
		String result = "";
if (num<0) {
	result +="-1";
	return  result;
}
		while(num>0) 
		{
			int temp = num%16;
			if(temp==10) 
			{
				result +='A';
			}else if(temp==11) 
			{
				result +='B';
			}
			else if(temp==12) 
			{
				result +='C';
			}
			else if(temp==13) 
			{
				result +='D';
			}else if(temp==14) 
			{
				result +='E';
			}else if(temp==15)
			{
				result +='F';
			}
			
			else  {
				result += Integer.toString(temp);
			}
			num = num/16;
		}
		return reversString(result);
	}
	
	public static String reversString(String str) 
	{
		String result = "";
		for(int i=str.length()-1; i>=0; i--) 
		{
			result +=str.charAt(i);
		}
		return result;
	}
	public static void main(String[] args) {
		System.out.println(dec2Hex(-14));
	}
}

///////

package EX2;
import java.awt.Color;
import java.util.Date;
import java.util.Random;
import java.util.Scanner;


public class gk {

	public static void gameoflife(int n, int cellsize) {
		 setboard(n, cellsize);
			boolean[][] cells = randomboolarray(n);
			drawcells(cells, cellsize, StdDraw.GREEN);
			while(deadOralive(cells)) {  
				cells = Ex2_3_1.nextGeneration(cells);
				Thread.holdsLock(true);
				drawcells(cells, cellsize, StdDraw.GREEN);

		}

	}

	
   public static boolean deadOralive(boolean[][] cells) {
		boolean isAlive = false;
		for (int k3 = 0; k3 < cells.length; k3++) {

			for (int k4 = 0; k4 < cells.length; k4++) {
				if (Ex2_3_1.checkCell(cells, k3, k4)){
					isAlive = true;

				}
			}
		}
		return isAlive;
	}
			
			
	public static boolean[][] randomboolarray(int n) {
		Random rand = new Random();
		boolean[][] arr = new boolean[n][n];
		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < arr[i].length; j++) {
				arr[i][j] = rand.nextBoolean();
			}
		}
		return arr;
	}
	
	public static void setboard(int n, int cellsize) {

		StdDraw.setCanvasSize(cellsize*(2*n), cellsize*(2*n));
		//can be changed sized
		StdDraw.setScale(0-5, n*cellsize-5);
		for (int i = 0; i <= n; i++) {
			StdDraw.line((i*cellsize)-5, -5,(i*cellsize)-5, (n*cellsize)-5 );//axis x
			StdDraw.line(-5 , (i*cellsize)-5, (n*cellsize)-5, (i*cellsize)-5);// axis y
		}
	}
		
	
	
	public static void drawcells(boolean[][] cells, int cellsize, Color color) {
		int n=cells.length;
		for (int k = 0; k < n; k++) {
		for (int k2 = 0; k2 < n; k2++) {
		if(Ex2_3_1.checkCell(cells, k, k2)) {
			StdDraw.setPenColor(color);
			StdDraw.filledSquare(k*cellsize, k2*cellsize, cellsize/2.2);

		}
		else {
			StdDraw.setPenColor(StdDraw.WHITE);
			StdDraw.filledSquare(k*cellsize, k2*cellsize, cellsize/2.2);

		}	
	}
}
			
		}
	public static void main(String[] args) {
		
		gameoflife(24,10);
	}
	

	}

/////////


